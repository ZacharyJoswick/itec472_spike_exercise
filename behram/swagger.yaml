swagger: "2.0"
info:
  description: "Helping you find your temporary home"
  version: "1.0.0"
  title: "RU Home Finder"
  contact:
    email: "bgowadia@radford.edu"
host: RUHomeFinder.fake"
basePath: "/v1"
tags:
- name: "home"
  externalDocs:
    description: "Home Button"
    url: "http://www.ruhomefinder.fake/"
schemes:
- "https"
- "http"
paths:
  /home:
    get:
      tags:
      - "home"
      summary: ""
      description: ""
      operationId: "listPostingss"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/home"
      responses:
        405:
          description: "Invalid Input"
      security:
      - home_auth:
        - "read:home"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "General User able to create a profile"
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created User Object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "Successful Operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs User into the System"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful Operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "Calls/hour allowed by the User"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "Date in UTC when the token expires"
        400:
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs the current User out and closes User Session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "Successful Operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get User by Username"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "Username to be retrieved. Use TestUser for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "Successful Operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid Username Supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This only works with a logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "Name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This only works with a logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "Username that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
securityDefinitions:
  home_auth:
    type: "oauth2"
    authorizationUrl: "hhttp://www.ruhomefinder.fake/oauth/"
    flow: "implicit"
    scopes:
      write:post: "Modify Posts on the User's Homepage"
      read:home: "Read Homepage Posts"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  home:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "Name"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "Posts on the Homepage"
    xml:
      name: "Home"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"