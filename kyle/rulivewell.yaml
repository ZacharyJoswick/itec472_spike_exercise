swagger: "2.0"
info:
  description: " This is a simple roommate / housing selector application."
  version: "1.2.0"
  title: "RU Live Well"
  contact:
    email: "kvansprewenburg@radford.edu"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "rulivewell.com"
basePath: "/home"
tags:
- name: "home"
  description: "The current feed of housing posts."
  externalDocs:
    description: ""
    url: "http://rulivewell.com/homess"
schemes:
- "https"
- "http"
paths:
  /home/{id}:
    get:
      tags:
      - "home"
      summary: "Get a housing post by an ID"
      description: "Get a housing post by an ID"
      operationId: "getPostById"
      consumes:
      - "json"
      produces:
      - "json"
      parameters:
      - name: "id"
        in: "path"
        description: "Get a housing post by an ID"
        required: true
        type: "integer"
        format: "int64"
      responses:
        405:
          description: "Post was attempted to be made from the endpoint."
        404:
          description: "Requested post not found!"
        200:
          description: "Post returned."
        400:
          description: "Format was incorrect, check log."
    delete:
      tags:
      - "home"
      summary: "Deletes a listing"
      description: "This can only be done by the logged in user."
      operationId: "deleteListing"
      produces:
      - "json"
      parameters:
      - name: "id"
        in: "path"
        description: "The listing to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid listing id supplied"
        404:
          description: "Listing not found"
        401:
          description: "You do not have permission to delete this Listing!"
        403:
          description: "You are not logged in."

  /home/create:
    post:
      tags:
      - "home"
      summary: "Create a new housing listing"
      description: "This can only be done by a logged in user."
      operationId: "createHome"
      produces:
      - "json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/Home"
      responses:
        200:
          description: "Listing created: {home-id}"
        409:
          description: "This listing already exists!. {home-id}"
        401:
          description: "You are not allowed to create listings. Please log in"
  /home/{id}/bedrooms:
    put:
      tags:
      - "home"
      summary: "Updates bedroom count"
      description: "This can only be done by the logged in user."
      operationId: "updateBedrooms"
      produces:
      - "json"
      parameters:
      - name: "id"
        in: "path"
        description: "Listing to be updated"
        required: true
        type: "string"
      - in: "path"
        name: "bedrooms"
        description: "Updated listing object"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid listing supplied"
        404:
          description: "Listing not found"
        401:
          description: "You are not allowed to update this listing."
        304:
          description: "New bedroom count cannot be the same as the original bedroom count!"
  /home/{id}/bathrooms:
    put:
      tags:
      - "home"
      summary: "Updates the bathroom count"
      description: "This can only be done by the logged in user."
      operationId: "updatedBathrooms"
      produces:
      - "json"
      parameters:
      - name: "id"
        in: "path"
        description: "Listing to be updated"
        required: true
        type: "string"
      - in: "path"
        name: "bathrooms"
        description: "Updated listing object"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid listing supplied"
        404:
          description: "Listing not found"
        401:
          description: "You are not allowed to update this listing."
        304:
          description: "New bathroom count cannot be the same as the original bathroom count!"
  /home/{id}/rent:
    put:
      tags:
      - "home"
      summary: "Updates the rent"
      description: "This can only be done by the logged in user."
      operationId: "updateRent"
      produces:
      - "json"
      parameters:
      - name: "id"
        in: "path"
        description: "Listing to be updated"
        required: true
        type: "string"
      - in: "path"
        name: "rent"
        description: "Updated listing object"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid listing supplied"
        404:
          description: "Listing not found"
        401:
          description: "You are not allowed to update this listing."
        304:
          description: "New rent cannot be the same as the original rent!"
  /home/{id}/address:
    put:
      tags:
      - "home"
      summary: "Updates the address"
      description: "This can only be done by the logged in user."
      operationId: "updateAddress"
      produces:
      - "json"
      parameters:
      - name: "id"
        in: "path"
        description: "address that need to be updated"
        required: true
        type: "string"
      - in: "path"
        name: "address"
        description: "Updated listing object"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid listing supplied"
        404:
          description: "Listing not found"
        401:
          description: "You are not allowed to update this listing."
        304:
          description: "New address cannot be the same as the original address!"
  /user/create:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "User created: {user-id}"
        409:
          description: "This user already exists!. {user-id}"
        401:
          description: "You are not allowed to create users."
  /user/login:
    post:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "json"
      parameters:
      - name: "username"
        in: "body"
        description: "The user name for login"
        required: true
        schema:
          $ref: "#/definitions/Login"
      responses:
        200:
          description: "User logged in."
        400:
          description: "Invalid username/password supplied"
        401: 
          description: "Incorrect username/password."
  /user/logout/{id}:
    post:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "json"
      parameters: 
        - name: "id"
          in: "path"
          description: "The user's id to be logged out."
          required: true
          type: "integer"
          format: "int64"
      responses:
        default:
          description: "You have been logged out."
        401:
          description: "You are not the logged in user!"
        404: 
          description: "You did something wrong"
        500:
          description: "You may have not been logged in."
        409:
          description: "Bad logout."
  /user/self:
    get:
      tags:
      - "user"
      summary: "Get user by id"
      description: ""
      operationId: "getUserById"
      produces:
      - "json"
      parameters:
        - name: "self-id"
          in: "path"
          description: "Return your OWN user."
          required: true
          type: "string"
      responses:
        200:
          description: "Got valid user"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
        403:
          description: "You cannot return that user."
  /user/{id}:
    get:
      tags:
      - "user"
      summary: "Get OTHER user by id"
      description: ""
      operationId: "getOtherUser"
      produces:
      - "json"
      parameters:
        - name: "id"
          in: "path"
          description: "Returns a user that is not the user currently logged in."
          required: true
          type: "string"
      responses:
        200:
          description: "Got valid user"
          schema:
            $ref: "#/definitions/OtherUser"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
        403:
          description: "You cannot return that user."  
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "json"
      parameters:
      - name: "id"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
        401:
          description: "You do not have permission to delete this user!"
        403:
          description: "You are not logged in."
  /user/{id}/username:
    put:
      tags:
      - "user"
      summary: "Updates the username of the logged in user"
      description: "This can only be done by the logged in user."
      operationId: "updateUsername"
      produces:
      - "json"
      parameters:
      - name: "id"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "path"
        name: "username"
        description: "Updated user object"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
        401:
          description: "You are not allowed to update this user."
        304:
          description: "New username cannot be the same as the original username!"
  /user/{id}/firstname:
    put:
      tags:
      - "user"
      summary: "Updates the first name of the logged in user"
      description: "This can only be done by the logged in user."
      operationId: "updateFirstName"
      produces:
      - "json"
      parameters:
      - name: "id"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "path"
        name: "firstname"
        description: "Updated user object"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
        401:
          description: "You are not allowed to update this user."
        304:
          description: "New first name cannot be the same as the original first name!"
  /user/{id}/lastname:
    put:
      tags:
      - "user"
      summary: "Updates the last name of the logged in user"
      description: "This can only be done by the logged in user."
      operationId: "updateLastName"
      produces:
      - "json"
      parameters:
      - name: "id"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "path"
        name: "lastname"
        description: "Updated user object"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
        401:
          description: "You are not allowed to update this user."
        304:
          description: "New last name cannot be the same as the original last name!"
  /user/{id}/email:
    put:
      tags:
      - "user"
      summary: "Updates the email of the logged in user"
      description: "This can only be done by the logged in user."
      operationId: "updateEmail"
      produces:
      - "json"
      parameters:
      - name: "id"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "path"
        name: "email"
        description: "Updated user object"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
        401:
          description: "You are not allowed to update this user."
        304:
          description: "New email cannot be the same as the original email!"
securityDefinitions:
  home_auth:
    type: "oauth2"
    authorizationUrl: "http://rulivewell.com/oauth/dialog"
    flow: "implicit"
    scopes:
      write:post: "modify posts in your homepage"
      read:home: "Read homepage posts"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  User:
    type: "object"
    properties:
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
  Home:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "integer"
        format: "int64"
      bedrooms:
        type: "integer"
        format: "int64"
      bathrooms: 
        type: "integer"
        format: "int64"
      rent: 
        type: "integer"
        format: "int64"
      address: 
        type: "string"
  Login:
    type: "object"
    properties:
      username:
        type: "string"
      token: 
        type: "string"
  OtherUser:
    type: "object"
    properties:
      username:
        type: "string"
      firstName:
        type: "string"
